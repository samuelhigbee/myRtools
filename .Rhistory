}
synthetic.control
library(myRtools)
synthetic.control
lin.reg
install_github("samuelhigbee/myRtools")
synthetic.control
lin.reg
MASC
?MASC
myRtools::MASC
library(devtools)
setwd("~/GitHub/myRtools/")
document()
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
debugSource('~/Box/many synthetic controls/simulation.R', echo=TRUE)
View(dt)
dt <- dcast(dt[,.(Y,t)], Y~t)
View(dt)
dt <- simulate(sim.G,sim.N,sim.T,sim.t.s)
dt <- dcast(dt[,.(Y,t)], t~Y)
View(dt)
dt <- simulate(sim.G,sim.N,sim.T,sim.t.s)
dt <- dcast(dt[,.(Y,t,i)], Y+i~t)
View(dt)
View(dt)
dt <- simulate(sim.G,sim.N,sim.T,sim.t.s)
dt <- dcast(dt[,.(Y,t,i)], Y~t)
dt <- simulate(sim.G,sim.N,sim.T,sim.t.s)
dt <- dcast(dt[,.(Y,t,i)], Y~t, value.var=Y)
dt <- simulate(sim.G,sim.N,sim.T,sim.t.s)
dt <- dcast(dt[,.(Y,t,i)], i~t, value.var=Y)
dt <- simulate(sim.G,sim.N,sim.T,sim.t.s)
dt <- dcast(dt[,.(Y,t,i)], Y+i~t, value.var=Y)
dt <- simulate(sim.G,sim.N,sim.T,sim.t.s)
dt <- dcast(dt[,.(Y,t,i)], Y+i~t)
dt <- simulate(sim.G,sim.N,sim.T,sim.t.s)
dt <- dcast(dt[,.(Y,t)], Y~t)
dt <- simulate(sim.G,sim.N,sim.T,sim.t.s)
dt <- dcast(dt[,.(Y,t)], Y~t, value.var="Y")
View(dt)
dt <- simulate(sim.G,sim.N,sim.T,sim.t.s)
dt <- dcast(dt[,.(Y,t,i)], i~t, value.var="Y")
View(dt)
pre <- as.character(-sim.t.s : sim.T - sim.t.s)
pre
pre <- as.character( (-sim.t.s):(sim.T-sim.t.s) )
pre
pre <- as.character( (-sim.t.s):-1 )
post <- as.character( 0:(sim.T-sim.t.s) )
pre
post
dt <- simulate(sim.G,sim.N,sim.T,sim.t.s)
dt <- dcast(dt[,.(Y,t,i)], i~t, value.var="Y")
pre <- as.character( (-sim.t.s):-1 )
post <- as.character( 0:(sim.T-sim.t.s) )
sc <- synthetic.control(Y = dt[D==0, Y],
X = dt[D==0, Y],
space = dt[D==1, mean(.SD), .SDcols=pre])
diff[s,] <- sc - dt[D==1, mean(.SD), .SDcols=post]
sc <- synthetic.control(Y = dt[D==0, Y],
X = dt[D==0, Y],
space = dt[D==1, mean(.SD), .SDcols=..pre])
space <- dt[D==1, lapply(mean,.SD), .SDcols=pre]
class(dt[,1])
?lapply
space <- dt[D==1, lapply(.SD, mean), .SDcols=pre]
pre
space <- dt[D==1, lapply(.SD, mean), .SDcols=..pre]
space <- dt[D==1, lapply(.SD, mean), ,.SDcols=pre]
space <- dt[D==1, lapply(.SD, mean), .SDcols="1"]
space <- dt[D==1, lapply(.SD, mean), .SDcols=i]
dt <- dcast(dt[,.(Y,t,i,D)], i+D~t, value.var="Y")
pre <- as.character( (-sim.t.s):-1 )
post <- as.character( 0:(sim.T-sim.t.s) )
space <- dt[D==1, lapply(.SD, mean), .SDcols=pre]
View(dt)
dt <- dcast(dt[,.(Y,t,i,D)], i+D~t, value.var="Y")
dt <- simulate(sim.G,sim.N,sim.T,sim.t.s)
dt <- dcast(dt[,.(Y,t,i,D)], i+D~t, value.var="Y")
pre <- as.character( (-sim.t.s):-1 )
post <- as.character( 0:(sim.T-sim.t.s) )
space <- dt[D==1, lapply(.SD, mean), .SDcols=pre]
pre <- as.character( (1-sim.t.s):-1 )
post <- as.character( 0:(sim.T-sim.t.s) )
pre
post
space <- dt[D==1, lapply(.SD, mean), .SDcols=pre]
sc <- synthetic.control(Y = dt[D==0, Y],
X = dt[D==0, Y],
space = space)
?synthetic.control
debugSource('~/Box/many synthetic controls/simulation.R', echo=TRUE)
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
debugSource('~/Box/many synthetic controls/simulation.R', echo=TRUE)
space
sc <- synthetic.control(Y = dt[D==0, ..post],
X = dt[D==0, ..pre],
space = space)
head(dt[D==0, ..pre])
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
dims(diff)
dim(diff)
diff <- array(NA, dim=c(S,sim.T))
dim(diff)
debugSource('~/Box/many synthetic controls/simulation.R', echo=TRUE)
sc-space
sc
dt <- simulate(sim.G,sim.N,sim.T,sim.t.s)
dt <- dcast(dt[,.(Y,t,i,D)], i+D~t, value.var="Y")
pre <- as.character( (1-sim.t.s):-1 )
post <- as.character( 0:(sim.T-sim.t.s) )
treat.pre <- dt[D==1, lapply(.SD, mean), .SDcols=pre]
treat.post <- dt[D==1, lapply(.SD, mean), .SDcols=post]
sc <- synthetic.control(Y = dt[D==0, ..post],
X = dt[D==0, ..pre],
space = treat.pre)
diff[s,] <- sc - c(treat.pre,treat.post)
c(treat.pre,treat.post)
unlist(treat.pre,treat.post)
c(unlist(treat.pre),unlist(treat.post))
sc - c(unlist(treat.pre),unlist(treat.post))
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
View(diff)
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
install_github("samuelhigbee/myRtools")
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
synthetic.control
setwd("~/GitHub/myRtools/")
document()
install_github("samuelhigbee/myRtools")
library(myRtools)
synthetic.control
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
sd(diffs[,6])
sd(diff[,6])
mean(diff[,6])
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
mean(ests[1,]-true[,1])
sd(ests[1,]-true[,1])
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
debugSource('~/Box/many synthetic controls/simulation.R', echo=TRUE)
head(dt[D==0,])
b.dt <- sample(dt[D==0,], size=floor(sim.G*sim.N/100))
head(b.dt)
b.dt <- dt[D==0,][sample(.N, floor(sim.G*sim.N/100))]
head(b.dt)
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
debugSource('~/Box/many synthetic controls/simulation.R', echo=TRUE)
View(tmp.ests)
colMeans(tmp.ests)
sc
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
ynthetic.control(Y = b.dt[,..post],
X = b.dt[,..pre],
space = treat.pre)
synthetic.control(Y = b.dt[,..post],
X = b.dt[,..pre],
space = treat.pre)
tmp.ests[b,] <- synthetic.control(Y = b.dt[,..post],
X = b.dt[,..pre],
space = treat.pre)
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
b
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
b
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
rm(list=ls())
library(data.table)
library(ggplot2)
library(myRtools)
library(gurobi)
set.seed(050877)
# Right now this does linear trends, but I think quadratic or other higher
# order trends would be interesting as well, and maybe better capture some of
# the concerns with common trends assumptions.
simulate <- function(G, N, T, t.s) {
# Parameters
# G     number of groups
# N     individuals per group
# T     number of time periods
# t.s   treatment period
NG <- N*G # total number of people
NT <- N*T # observations per group
NGT <- N*G*T # total observations
dt <- data.table()
dt[, i := kronecker(1:NG,rep(1,T))]
dt[, t := rep(1:T,NG) - t.s]
dt[, g := kronecker(1:G,rep(1,NT))]
setkey(dt,i,t)
# untreated random walk with drift
dt[, trend.0 := rnorm(3)%*%c(t,t^2,t^3), by=i]
dt[, gtrend.0 := rnorm(3)%*%c(t,t^2,t^3), by=g]
dt[, noise.0 := rnorm(NGT)]
dt[, Y.0 := trend.0 + gtrend.0 + cumsum(noise.0), by=i]
# treated random walk with drift
dt[, trend.1 := rnorm(3)%*%c(t,t^2,t^3), by=i]
dt[, gtrend.1 := rnorm(3)%*%c(t,t^2,t^3), by=g]
dt[, noise.1 := rnorm(NGT)]
dt[, Y.1 := Y.0 + trend.1 + gtrend.1 + cumsum(noise.1), by=i]
# Allow for selection on gains
dt[, D := mean((t>=0)*Y.1)>mean((t>=0)*Y.0), by=g]
dt[, D.t := D*(t>=0)]
dt[, Y := D.t*Y.1 + (1-D.t)*Y.0]
return(dt)
}
dt <- simulate(10,100,10,6)
rm(list=ls())
library(data.table)
library(ggplot2)
library(myRtools)
library(gurobi)
set.seed(050877)
# Right now this does linear trends, but I think quadratic or other higher
# order trends would be interesting as well, and maybe better capture some of
# the concerns with common trends assumptions.
simulate <- function(G, N, T, t.s) {
# Parameters
# G     number of groups
# N     individuals per group
# T     number of time periods
# t.s   treatment period
NG <- N*G # total number of people
NT <- N*T # observations per group
NGT <- N*G*T # total observations
dt <- data.table()
dt[, i := kronecker(1:NG,rep(1,T))]
dt[, t := rep(1:T,NG) - t.s]
dt[, g := kronecker(1:G,rep(1,NT))]
setkey(dt,i,t)
# untreated random walk with drift
dt[, trend.0 := v%*%c(t,t^2,t^3), by=i]
dt[, gtrend.0 := t(rnorm(3))%*%c(t,t^2,t^3), by=g]
dt[, noise.0 := rnorm(NGT)]
dt[, Y.0 := trend.0 + gtrend.0 + cumsum(noise.0), by=i]
# treated random walk with drift
dt[, trend.1 := t(rnorm(3))%*%c(t,t^2,t^3), by=i]
dt[, gtrend.1 := t(rnorm(3))%*%c(t,t^2,t^3), by=g]
dt[, noise.1 := rnorm(NGT)]
dt[, Y.1 := Y.0 + trend.1 + gtrend.1 + cumsum(noise.1), by=i]
# Allow for selection on gains
dt[, D := mean((t>=0)*Y.1)>mean((t>=0)*Y.0), by=g]
dt[, D.t := D*(t>=0)]
dt[, Y := D.t*Y.1 + (1-D.t)*Y.0]
return(dt)
}
dt <- simulate(10,100,10,6)
rm(list=ls())
library(data.table)
library(ggplot2)
library(myRtools)
library(gurobi)
set.seed(050877)
# Right now this does linear trends, but I think quadratic or other higher
# order trends would be interesting as well, and maybe better capture some of
# the concerns with common trends assumptions.
simulate <- function(G, N, T, t.s) {
# Parameters
# G     number of groups
# N     individuals per group
# T     number of time periods
# t.s   treatment period
NG <- N*G # total number of people
NT <- N*T # observations per group
NGT <- N*G*T # total observations
dt <- data.table()
dt[, i := kronecker(1:NG,rep(1,T))]
dt[, t := rep(1:T,NG) - t.s]
dt[, g := kronecker(1:G,rep(1,NT))]
setkey(dt,i,t)
# untreated random walk with drift
dt[, trend.0 := t(rnorm(3))%*%c(t,t^2,t^3), by=i]
dt[, gtrend.0 := t(rnorm(3))%*%c(t,t^2,t^3), by=g]
dt[, noise.0 := rnorm(NGT)]
dt[, Y.0 := trend.0 + gtrend.0 + cumsum(noise.0), by=i]
# treated random walk with drift
dt[, trend.1 := t(rnorm(3))%*%c(t,t^2,t^3), by=i]
dt[, gtrend.1 := t(rnorm(3))%*%c(t,t^2,t^3), by=g]
dt[, noise.1 := rnorm(NGT)]
dt[, Y.1 := Y.0 + trend.1 + gtrend.1 + cumsum(noise.1), by=i]
# Allow for selection on gains
dt[, D := mean((t>=0)*Y.1)>mean((t>=0)*Y.0), by=g]
dt[, D.t := D*(t>=0)]
dt[, Y := D.t*Y.1 + (1-D.t)*Y.0]
return(dt)
}
dt <- simulate(10,100,10,6)
rnorm(3)
rnorm(3)%*%c(2,4,8)
rm(list=ls())
library(data.table)
library(ggplot2)
library(myRtools)
library(gurobi)
set.seed(050877)
# Right now this does linear trends, but I think quadratic or other higher
# order trends would be interesting as well, and maybe better capture some of
# the concerns with common trends assumptions.
simulate <- function(G, N, T, t.s) {
# Parameters
# G     number of groups
# N     individuals per group
# T     number of time periods
# t.s   treatment period
NG <- N*G # total number of people
NT <- N*T # observations per group
NGT <- N*G*T # total observations
dt <- data.table()
dt[, i := kronecker(1:NG,rep(1,T))]
dt[, t := rep(1:T,NG) - t.s]
dt[, g := kronecker(1:G,rep(1,NT))]
setkey(dt,i,t)
# untreated random walk with drift
dt[, trend.0 := rnorm(3)%*%t(c(t,t^2,t^3)), by=i]
dt[, gtrend.0 := rnorm(3)%*%c(t,t^2,t^3), by=g]
dt[, noise.0 := rnorm(NGT)]
dt[, Y.0 := trend.0 + gtrend.0 + cumsum(noise.0), by=i]
# treated random walk with drift
dt[, trend.1 := rnorm(3)%*%c(t,t^2,t^3), by=i]
dt[, gtrend.1 := rnorm(3)%*%c(t,t^2,t^3), by=g]
dt[, noise.1 := rnorm(NGT)]
dt[, Y.1 := Y.0 + trend.1 + gtrend.1 + cumsum(noise.1), by=i]
# Allow for selection on gains
dt[, D := mean((t>=0)*Y.1)>mean((t>=0)*Y.0), by=g]
dt[, D.t := D*(t>=0)]
dt[, Y := D.t*Y.1 + (1-D.t)*Y.0]
return(dt)
}
dt <- simulate(10,100,10,6)
debugSource('~/Box/many synthetic controls/simulation.R', echo=TRUE)
dt[, trend.0 := rnorm(3)%*%t(c(t,t^2,t^3)), by=i]
dt[, gtrend.0 := sum(rnorm(3)*c(t,t^2,t^3)), by=g]
dt[, trend.0 := sum(rnorm(3)*(c(t,t^2,t^3))), by=i]
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
rm(list=ls())
library(data.table)
library(ggplot2)
library(myRtools)
library(gurobi)
set.seed(050877)
# Right now this does linear trends, but I think quadratic or other higher
# order trends would be interesting as well, and maybe better capture some of
# the concerns with common trends assumptions.
simulate <- function(G, N, T, t.s) {
# Parameters
# G     number of groups
# N     individuals per group
# T     number of time periods
# t.s   treatment period
NG <- N*G # total number of people
NT <- N*T # observations per group
NGT <- N*G*T # total observations
dt <- data.table()
dt[, i := kronecker(1:NG,rep(1,T))]
dt[, t := rep(1:T,NG) - t.s]
dt[, g := kronecker(1:G,rep(1,NT))]
setkey(dt,i,t)
# untreated random walk with drift
dt[, trend.0 := sum(rnorm(3)*(c(t,t^2,t^3))), by=i]
dt[, gtrend.0 := sum(rnorm(3)*c(t,t^2,t^3)), by=g]
dt[, noise.0 := rnorm(NGT)]
dt[, Y.0 := trend.0 + gtrend.0 + cumsum(noise.0), by=i]
# treated random walk with drift
dt[, trend.1 := sum(rnorm(3)*(c(t,t^2,t^3))), by=i]
dt[, gtrend.1 := sum(rnorm(3)*(c(t,t^2,t^3))), by=g]
dt[, noise.1 := rnorm(NGT)]
dt[, Y.1 := Y.0 + trend.1 + gtrend.1 + cumsum(noise.1), by=i]
# Allow for selection on gains
dt[, D := mean((t>=0)*Y.1)>mean((t>=0)*Y.0), by=g]
dt[, D.t := D*(t>=0)]
dt[, Y := D.t*Y.1 + (1-D.t)*Y.0]
return(dt)
}
dt <- simulate(10,100,10,6)
plot.dt <- dt[, mean(Y), by=.(D,t)]
ggplot(data=plot.dt, aes(x=t,y=V1,color=D)) +
geom_line()
View(dt)
dt[,test:=rnorm(3),by=i]
rnoem(3)
rnorm(3)
rnorm(3) %*% c(2,4,8)
dt[, c(trend.0.1,trend.0.2,trend.0.3) := rnorm(3), by=i]
dt[, c("trend.0.1","trend.0.2","trend.0.3)" := rnorm(3), by=i]
dt[, c("trend.0.1","trend.0.2","trend.0.3") := rnorm(3), by=i]
dt[, c("trend.0.1","trend.0.2","trend.0.3") := list(rnorm(3)), by=i]
list(rnorm(3))
dt[, c("trend.0.1","trend.0.2","trend.0.3") := as.list(rnorm(3)), by=i]
as.list(rnorm(3))
rm(list=ls())
library(data.table)
library(ggplot2)
library(myRtools)
library(gurobi)
set.seed(050877)
# Right now this does linear trends, but I think quadratic or other higher
# order trends would be interesting as well, and maybe better capture some of
# the concerns with common trends assumptions.
simulate <- function(G, N, T, t.s) {
# Parameters
# G     number of groups
# N     individuals per group
# T     number of time periods
# t.s   treatment period
NG <- N*G # total number of people
NT <- N*T # observations per group
NGT <- N*G*T # total observations
dt <- data.table()
dt[, i := kronecker(1:NG,rep(1,T))]
dt[, t := rep(1:T,NG) - t.s]
dt[, g := kronecker(1:G,rep(1,NT))]
setkey(dt,i,t)
# untreated random walk with drift
dt[, c("trend.0.1","trend.0.2","trend.0.3") := as.list(rnorm(3)), by=i]
dt[, c("gtrend.0.1","gtrend.0.2","gtrend.0.3") := as.list(rnorm(3)), by=g]
dt[, noise.0 := rnorm(NGT)]
dt[, Y.0 := trend.0.1*t + trend.0.2*t^2 + trend.0.3*t^3 +
gtrend.0.1*t + gtrend.0.2*t^2 + gtrend.0.3*t^3 + cumsum(noise.0), by=i]
# treated random walk with drift
dt[, c("trend.0.1","trend.0.2","trend.0.3") := as.list(rnorm(3)), by=i]
dt[, c("gtrend.0.1","gtrend.0.2","gtrend.0.3") := as.list(rnorm(3)), by=g]
dt[, noise.1 := rnorm(NGT)]
dt[, Y.1 := trend.1.1*t + trend.1.2*t^2 + trend.1.3*t^3 +
gtrend.1.1*t + gtrend.1.2*t^2 + gtrend.1.3*t^3 + cumsum(noise.1), by=i]
# Allow for selection on gains
dt[, D := mean((t>=0)*Y.1)>mean((t>=0)*Y.0), by=g]
dt[, D.t := D*(t>=0)]
dt[, Y := D.t*Y.1 + (1-D.t)*Y.0]
return(dt)
}
dt <- simulate(10,100,10,6)
plot.dt <- dt[, mean(Y), by=.(D,t)]
ggplot(data=plot.dt, aes(x=t,y=V1,color=D)) +
geom_line()
rm(list=ls())
library(data.table)
library(ggplot2)
library(myRtools)
library(gurobi)
set.seed(050877)
# Right now this does linear trends, but I think quadratic or other higher
# order trends would be interesting as well, and maybe better capture some of
# the concerns with common trends assumptions.
simulate <- function(G, N, T, t.s) {
# Parameters
# G     number of groups
# N     individuals per group
# T     number of time periods
# t.s   treatment period
NG <- N*G # total number of people
NT <- N*T # observations per group
NGT <- N*G*T # total observations
dt <- data.table()
dt[, i := kronecker(1:NG,rep(1,T))]
dt[, t := rep(1:T,NG) - t.s]
dt[, g := kronecker(1:G,rep(1,NT))]
setkey(dt,i,t)
# untreated random walk with drift
dt[, c("trend.0.1","trend.0.2","trend.0.3") := as.list(rnorm(3)), by=i]
dt[, c("gtrend.0.1","gtrend.0.2","gtrend.0.3") := as.list(rnorm(3)), by=g]
dt[, noise.0 := rnorm(NGT)]
dt[, Y.0 := trend.0.1*t + trend.0.2*t^2 + trend.0.3*t^3 +
gtrend.0.1*t + gtrend.0.2*t^2 + gtrend.0.3*t^3 + cumsum(noise.0), by=i]
# treated random walk with drift
dt[, c("trend.1.1","trend.1.2","trend.1.3") := as.list(rnorm(3)), by=i]
dt[, c("gtrend.1.1","gtrend.1.2","gtrend.1.3") := as.list(rnorm(3)), by=g]
dt[, noise.1 := rnorm(NGT)]
dt[, Y.1 := trend.1.1*t + trend.1.2*t^2 + trend.1.3*t^3 +
gtrend.1.1*t + gtrend.1.2*t^2 + gtrend.1.3*t^3 + cumsum(noise.1), by=i]
# Allow for selection on gains
dt[, D := mean((t>=0)*Y.1)>mean((t>=0)*Y.0), by=g]
dt[, D.t := D*(t>=0)]
dt[, Y := D.t*Y.1 + (1-D.t)*Y.0]
return(dt)
}
dt <- simulate(10,100,10,6)
plot.dt <- dt[, mean(Y), by=.(D,t)]
ggplot(data=plot.dt, aes(x=t,y=V1,color=D)) +
geom_line()
View(dt)
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
debugSource('~/Box/many synthetic controls/simulation.R', echo=TRUE)
sc <- synthetic.control(Y = dt[D==0, ..post],
X = dt[D==0, ..pre],
space = treat.pre)
sc <- synthetic.control(Y = dt[D==0, ..post],
X = dt[D==0, ..pre],
space = treat.pre)
sc <- synthetic.control(Y = dt[D==0, ..post],
X = dt[D==0, ..pre],
space = treat.pre)
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
?try
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
?tryCatch
?try
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
?Sample
?sample
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
source('~/Box/many synthetic controls/simulation.R', echo=TRUE)
mean(scest[1,]-true[,1],na.rm=TRUE)
sd(scest[1,]-true[,1],na.rm=TRUE)
mean(mscest[1,]-true[,1],na.rm=TRUE)
sd(mscest[1,]-true[,1],na.rm=TRUE)
frac.fail
